class Solution {
public:
    bool solve(vector<int>&piles,int x,int h)
    {
        for(int i=0;i<piles.size();i++)
        {
            if(h<=0)
                return false;
            if(piles[i]%x==0)
            {
                h-=piles[i]/x;
            }
            else
            {
                h-=(piles[i]/x+1);
            }
        }
        if(h<0)
            return false;
        return true;
    }
    int minEatingSpeed(vector<int>& piles, int h) {
        int n = piles.size();
        long long sm=accumulate(piles.begin(),piles.end(),0LL);
        if(h>sm)
            return 1;
        int st = *min_element(piles.begin(),piles.end())/h;
        int end = *max_element(piles.begin(),piles.end());
        int ans=INT_MAX;
        while(st<=end)
        {
            int mid=(st+end)/2;
            if(solve(piles,mid,h))
            {
                end=mid-1;
                ans=min(ans,mid);
            }
            else
            {
                st=mid+1;
            }
        }
        return ans;
    }
};
