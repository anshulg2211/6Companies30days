class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        queue<pair<int,int>> q;
        int fresh=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==2)
                {
                    q.push(make_pair(i,j));
                }
                else if(grid[i][j]==1)
                    fresh++;
            }
        }
        if(fresh==0)
        return 0;
        int i,j,ans=0;
        while(!q.empty())
        {
            int sz = q.size();
            while(sz--)
            {
                i = q.front().first;
                j = q.front().second;
                q.pop();
                if(i+1<m && grid[i+1][j]==1)
                {
                    grid[i+1][j]=2;
                    q.push(make_pair(i+1,j));
                    fresh--;
                }
                if(i-1>=0 && grid[i-1][j]==1)
                {
                    grid[i-1][j]=2;
                    q.push(make_pair(i-1,j));
                    fresh--;
                }
                if(j+1<n && grid[i][j+1]==1)
                {
                    grid[i][j+1]=2;
                    q.push(make_pair(i,j+1));
                    fresh--;
                }
                if(j-1>=0 && grid[i][j-1]==1)
                {
                    grid[i][j-1]=2;
                    q.push(make_pair(i,j-1));
                    fresh--;
                }
            }
            ans++;
        }
        if(fresh==0)
            return max(0,ans-1);
        else
            return -1;
        
    }
};
