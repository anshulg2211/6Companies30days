class Solution {
public:
    bool dfs(vector<vector<int>>&adj,int node,vector<bool>&vis,vector<int>&ans,vector<int>&s)
    {
        if(find(s.begin(),s.end(),node)!=s.end())
            return false;
        s.push_back(node);
        for(int i=0;i<adj[node].size();i++)
        {
            if(!vis[adj[node][i]])
            {
                if(!dfs(adj,adj[node][i],vis,ans,s))
                    return false;
            }
        }
        if(!vis[node])
        ans.push_back(node);
        vis[node]=true;
        return true;
    }
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> adj(numCourses);
        vector<int> ans;
        vector<bool> vis(numCourses,false);
        int n=prerequisites.size();
        if(n==0)
        {
            for(int i=0;i<numCourses;i++)
            {
                ans.push_back(i);
            }
            return ans;
        }
        for(int i=0;i<n;i++)
        {
            adj[prerequisites[i][0]].push_back(prerequisites[i][1]);
        }
       
        for(int j=0;j<numCourses;j++)
        {
            if(adj[j].size()==0)
            {
                if(!vis[j])
                ans.push_back(j);
                vis[j]=true;
                continue;
            }
            for(auto i:adj[j])
            {
                if(!vis[i])
                {
                    vector<int> s;
                    s.push_back(j);
                    if(!dfs(adj,i,vis,ans,s))
                    {
                        vector<int> emp;
                        return emp;
                    }
                }
            }
            if(!vis[j])
            ans.push_back(j);
            vis[j]=true;
        }
        
        return ans;
    }
};
