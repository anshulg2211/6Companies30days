class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        vector<vector<pair<int,double>>> adj(n);
        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back({edges[i][1],succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0],succProb[i]});
        }
        priority_queue<pair<double,int>> pq;
        pq.push({1.0,start});
        vector<double> probs(n,0.0);
        probs[start]=1.0;
        while(!pq.empty())
        {
            int x=pq.top().second;
            pq.pop();
            for(auto i:adj[x])
            {
                if(probs[x]*i.second>probs[i.first])
                {
                    probs[i.first]=probs[x]*i.second;
                    pq.push({probs[i.first],i.first});
                }
            }
        }
        return probs[end];
    }
};
